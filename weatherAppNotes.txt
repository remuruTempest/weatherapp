Weather keeps you informed about conditions including temperature, rain, snow, and wind. Check out the forecast by the hour for the next ten days. Use maps to help you explore weather patterns in your area. Stay notified about upcoming adverse conditions.


This code is a React component that retrieves and displays weather data based on user input or a default city (Bangalore). It uses the `useState` and `useEffect` hooks to manage state and side effects. Let’s break it down step by step and explain the logic behind the code.

### Imports
```js
import { useEffect, useState } from "react";
import Search from "../search";
```
- `useEffect`: A hook that lets you perform side effects in function components. It's often used to fetch data when the component mounts or updates.
- `useState`: A hook that allows you to add state variables to a functional component.
- `Search`: A custom component (presumably an input box) that helps with searching cities.

### State Variables
```js
const [search, setSearch] = useState("");  // Holds the search term (city name)
const [loading, setLoading] = useState(false);  // Tracks whether the data is loading
const [weatherData, setWeatherData] = useState(null);  // Holds the fetched weather data
```
- `search`: A state to store the value typed by the user in the search bar.
- `loading`: A state used to show a loading spinner or message when the data is being fetched.
- `weatherData`: A state to store the weather data received from the API.

### `fetchWeatherData` Function
```js
async function fetchWeatherData(param) {
  setLoading(true);  // Set loading state to true when fetching data
  try {
    const response = await fetch(
      `https://api.openweathermap.org/data/2.5/weather?q=${param}&appid=e34b4c51d8c2b7bf48d5217fe52ff79e`
    );

    const data = await response.json();  // Parse the response as JSON
    if (data) {
      setWeatherData(data);  // Save the weather data to state
      setLoading(false);  // Set loading state to false when done
    }
  } catch (e) {
    setLoading(false);  // Set loading state to false if there’s an error
    console.log(e);  // Log any errors to the console
  }
}
```
- This function fetches the weather data from the **OpenWeatherMap API**.
- It takes a city name as the parameter (`param`), sends a request, and handles the response.
- If the request is successful, it updates the `weatherData` state with the fetched data and stops the loading state.
- If there’s an error, it stops the loading state and logs the error.

### `handleSearch` Function
```js
async function handleSearch() {
  fetchWeatherData(search);  // Call fetchWeatherData with the current search term
}
```
- This function is called when the user wants to search for a city. It invokes the `fetchWeatherData` function with the `search` state (which contains the user input).

### `getCurrentDate` Function
```js
function getCurrentDate() {
  return new Date().toLocaleDateString("en-us", {
    weekday: "long",
    month: "long",
    day: "numeric",
    year: "numeric",
  });
}
```
- This function returns the current date in a human-readable format like `Wednesday, February 14, 2025`.
- It uses `toLocaleDateString` to format the date in English (`en-us`).

### `useEffect` Hook
```js
useEffect(() => {
  fetchWeatherData("bangalore");  // Fetch weather data for "bangalore" when the component mounts
}, []);
```
- The `useEffect` hook is used here to fetch weather data when the component first loads.
- The empty dependency array (`[]`) ensures that this effect runs only once, similar to `componentDidMount` in class components.
- It fetches the weather data for Bangalore by default.

### Render Logic (JSX)
```js
return (
  <div>
    <Search
      search={search}
      setSearch={setSearch}
      handleSearch={handleSearch}
    />
    {loading ? (
      <div className="loading">Loading...</div>
    ) : (
      <div>
        <div className="city-name">
          <h2>
            {weatherData?.name}, <span>{weatherData?.sys?.country}</span>
          </h2>
        </div>
        <div className="date">
          <span>{getCurrentDate()}</span>
        </div>
        <div className="temp">{weatherData?.main?.temp}</div>
        <p className="description">
          {weatherData && weatherData.weather && weatherData.weather[0]
            ? weatherData.weather[0].description
            : ""}
        </p>
        <div className="weather-info">
          <div className="column">
            <div>
              <p className="wind">{weatherData?.wind?.speed}</p>
              <p>Wind Speed</p>
            </div>
          </div>
          <div className="column">
            <div>
              <p className="humidity">{weatherData?.main?.humidity}%</p>
              <p>Humidity</p>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
);
```
- The component renders the weather information if `loading` is false. Otherwise, it displays a loading message.
- `Search` component is used to handle the search input.
- `weatherData?.name`: Accesses the city name from the API response.
- `weatherData?.sys?.country`: Accesses the country code (e.g., `IN` for India).
- `weatherData?.main?.temp`: Accesses the temperature value.
- `weatherData?.weather[0]?.description`: Accesses the weather description (e.g., `clear sky`).
- `weatherData?.wind?.speed`: Accesses the wind speed.
- `weatherData?.main?.humidity`: Accesses the humidity percentage.

### Example Walkthrough
- When the component first renders, it fetches weather data for Bangalore (`useEffect`).
- The user can type a city name in the `Search` component, and clicking the search will fetch and display the weather data for that city.
- If the data is loading, a message (`Loading...`) will be shown.
- Once the data is fetched, the city name, country, temperature, description, wind speed, and humidity are displayed.

### Summary of Flow:
1. The component starts with a default city (Bangalore) weather data fetched on mount (`useEffect`).
2. The user can search for a new city, and the `handleSearch` function triggers a new fetch request.
3. The `loading` state is used to show a loading message while fetching data.
4. Once the data is fetched successfully, the weather details are displayed (city, temperature, description, wind speed, humidity).
   
### Example:
1. If the user enters **"Paris"** and clicks the search button, the app will fetch weather data for Paris and display it.
2. If the city name entered is incorrect, the app may display an error (though this code doesn’t explicitly handle API errors for wrong city names, it just logs them).

Let me know if you need further clarification or additional examples!


"Other projects relating to weather app"

https://www.youtube.com/watch?v=74IOjtVvExY


"Other Weather app API online"

If you're a beginner in JavaScript and want to get started with weather apps, using APIs is a great way to practice. Here are 10 beginner-friendly weather APIs that you can integrate into a JavaScript-based weather app:

### 1. **OpenWeatherMap API**
   - **Description**: A very popular and beginner-friendly API. It offers free access to current weather, forecasts, and historical data.
   - **Website**: [OpenWeatherMap](https://openweathermap.org/api)
   - **Features**: 
     - Current weather data
     - Forecast data (5-day forecast, 16-day forecast)
     - Hourly forecast
     - Global coverage

### 2. **WeatherAPI**
   - **Description**: Offers a free tier with up to 1,000 free calls per day. It's easy to integrate with basic and advanced features.
   - **Website**: [WeatherAPI](https://www.weatherapi.com/)
   - **Features**: 
     - Current weather
     - 7-day forecast
     - Historical weather data
     - Location-based weather searches

### 3. **Weatherbit API**
   - **Description**: A simple, clean API that provides free access to basic weather data.
   - **Website**: [Weatherbit](https://weatherbit.io/api)
   - **Features**: 
     - Current weather
     - Forecasts (up to 16 days)
     - Air quality data

### 4. **AccuWeather API**
   - **Description**: Provides detailed and accurate weather information, but with limited free access.
   - **Website**: [AccuWeather API](https://developer.accuweather.com/)
   - **Features**:
     - Current weather
     - Hourly forecasts
     - Severe weather alerts

### 5. **Climacell (Tomorrow.io) API**
   - **Description**: Now rebranded as Tomorrow.io, it focuses on high-precision weather data, even for specific needs (e.g., business decisions).
   - **Website**: [Tomorrow.io API](https://www.tomorrow.io/weather-api/)
   - **Features**:
     - Hyper-local weather forecasts
     - Historical weather data
     - Air quality monitoring

### 6. **Visual Crossing Weather API**
   - **Description**: A great free option for weather data with historical data options.
   - **Website**: [Visual Crossing](https://www.visualcrossing.com/weather-api)
   - **Features**:
     - Hourly forecasts
     - Historical weather data
     - Global coverage

### 7. **MetaWeather API**
   - **Description**: A simple and free weather API that does not require an API key, which makes it easy for beginners.
   - **Website**: [MetaWeather](https://www.metaweather.com/api/)
   - **Features**:
     - Current weather
     - 5-day forecasts
     - No API key needed

### 8. **Open-Meteo API**
   - **Description**: A free, open-source weather API focused on providing weather data without the need for an API key.
   - **Website**: [Open-Meteo](https://open-meteo.com/)
   - **Features**:
     - Hourly forecasts
     - Temperature, wind, and precipitation data
     - Global coverage

### 9. **Dark Sky API (Now part of Apple Weather)**
   - **Description**: Dark Sky is now owned by Apple and the API is being deprecated, but it was widely used for its simple and accurate data.
   - **Website**: [Dark Sky API](https://darksky.net/dev)
   - **Features**:
     - Hourly and daily forecasts
     - Severe weather alerts
     - Precipitation predictions

### 10. **Storm Glass API**
   - **Description**: Primarily focused on marine weather data, but offers general weather information as well.
   - **Website**: [Storm Glass API](https://stormglass.io/)
   - **Features**:
     - Weather forecasts
     - Marine-focused data
     - Air and water quality data

---

### How to Get Started:
1. **Sign Up for an API Key**: Most of these APIs require you to sign up for an API key (which is free in most cases).
2. **Explore Documentation**: Check out the API documentation to understand how to make requests and what data you’ll receive.
3. **Use JavaScript Fetch/Axios**: Once you have an API key, you can use `fetch()` or `Axios` to make HTTP requests in JavaScript and display the data on your website or app.

Let me know if you'd like a specific code example to help you get started!
